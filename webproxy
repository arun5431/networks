from http.server import HTTPServer,BaseHTTPRequestHandler
import urllib.request
from urllib.request import Request
import os.path

domain = ""

class MyHttpRequestHandler(BaseHTTPRequestHandler):
    def  do_GET(self):
        global domain
        url = self.path
        url = url[1:]
        if 'http' in url:
            domain = url
        else:
            if domain:
                url = domain+url
        print(f"Requested URL: {url}")
        filename = ''.join(e for e in url if e.isalnum())
        if len(filename)>250:
            filename = filename[:100]
        if os.path.exists(f"cache/{filename}"):
            print("Found in cache. Loading the site from cache")
            with open(f"cache/{filename}",'rb') as response:
                html = response.read()
            self.send_response(200)
            self.send_header("Content-type", "text/html")
            self.end_headers()
            self.wfile.write(html)
        else:
            print("Not found in cache")
            try:
                req = Request(url, headers={'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:100.0) Gecko/20100101 Firefox/100.0'})
                with urllib.request.urlopen(req) as response:
                    html = response.read()
                with open(f"cache/{filename}",'wb') as file:
                    file.write(html)
                print("Saved to cache: "+filename)
                self.send_response(200)
                self.send_header("Content-type", "text/html")
                self.end_headers()
                self.wfile.write(html)
            except: # Exception as e:
                # print(e)
                self.send_response(404)
                self.send_header("Content-type", "text/html")
                self.end_headers()
                response = f"URL: {url} <h1>404 NOT FOUND</h1>"
                print(response)
                self.wfile.write(bytes(response,"utf-8"))

HOST = '127.0.0.1'
PORT = 8000
my_server = HTTPServer((HOST, PORT), MyHttpRequestHandler)
my_server.serve_forever()
my_server.close()

